{"ast":null,"code":"import _objectSpread from\"/home/lorismilloni/Code/repos/study-projects/studies-frontend-super-trunfo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/home/lorismilloni/Code/repos/study-projects/studies-frontend-super-trunfo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _classCallCheck from\"/home/lorismilloni/Code/repos/study-projects/studies-frontend-super-trunfo/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/lorismilloni/Code/repos/study-projects/studies-frontend-super-trunfo/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/home/lorismilloni/Code/repos/study-projects/studies-frontend-super-trunfo/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/lorismilloni/Code/repos/study-projects/studies-frontend-super-trunfo/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import Card from'./Card';// Requisito 10, 11 e 12 feitos seguindo o PR do Leonardo Vogel, com o objetivo de treinar a implementação da função e quem sabe deixar o joguinho funcional depois. Obrigada Leo.\n// Obrigada Eduardo Bazler por me ajudar a resolver o conflito no requisito, para passar no teste e não imprimir mais duas listas no meu Tryunfo, precisei remover do App o CardList, que continua comitado para consulta, a exibição anterior da lista que eu tinha criado para passar no requisito 8.\n// Agora só a lista com os filtros é exibida na minha página do Tryunfo.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FilterList=/*#__PURE__*/function(_Component){_inherits(FilterList,_Component);var _super=_createSuper(FilterList);function FilterList(){_classCallCheck(this,FilterList);return _super.apply(this,arguments);}_createClass(FilterList,[{key:\"render\",value:function render(){var _this$props=this.props,cardList=_this$props.cardList,deleteCard=_this$props.deleteCard,filterName=_this$props.filterName,filterRare=_this$props.filterRare,filterTrunfo=_this$props.filterTrunfo;var filterCards=_toConsumableArray(cardList);// aqui o filtro atualiza o array de cards de acordo com o que foi aplicado, um valor inicial recebe a lista de cartas, para que caso não seja aplicado nenhum filtro, ele exiba todos as cartas;\n// caso exista alguma coisa no input de filtro por nome, ele executa um filter atualizando o próprio filterCards, adicionando ao novo array apenas aqueles cards que tenham no nome o que foi passado no input;\nif(filterName){// se a string não for vazia, considera como true;\nfilterCards=filterCards.filter(function(_ref){var cardName=_ref.cardName;return cardName.includes(filterName);});}if(filterRare!=='todas'){filterCards=filterCards.filter(function(_ref2){var cardRare=_ref2.cardRare;return cardRare===filterRare;});// se o filtro por raridade for diferente de todas as cartas, ele atualiza o filterCards, colocando no novo array apenas os cards que possuem a raridade informada, como essa condição aparece depois da filtragem por nome, caso já esteja sendo filtrado algo pelo nome, ele usa como array inicial o que já está filtrado, tornando assim os dois acumulativos.\n}if(filterTrunfo){filterCards=cardList.filter(function(_ref3){var cardTrunfo=_ref3.cardTrunfo;return cardTrunfo;});// caso o checkbox de filtro por Super Trunfo seja marcado, ele atualiza o filterCards, usando como array base o array cardList original, por esse motivo, por isso é a última condição, não sendo cumulativa;\n}// depois de realizar os filtros, o .map será executado para renderizar com o componente Card, os que precisam a lista que precisa ser renderizada;\nreturn/*#__PURE__*/_jsx(\"section\",{children:filterCards.map(function(card){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Card,_objectSpread({},card)),/*#__PURE__*/_jsx(\"button\",{type:\"button\",\"data-testid\":\"delete-button\",onClick:function onClick(){return deleteCard(card,card.cardTrunfo);},children:\"Excluir\"})]},card.cardName);})});}}]);return FilterList;}(Component);export{FilterList as default};","map":{"version":3,"sources":["/home/lorismilloni/Code/repos/study-projects/studies-frontend-super-trunfo/src/components/FilterList.jsx"],"names":["React","Component","Card","FilterList","props","cardList","deleteCard","filterName","filterRare","filterTrunfo","filterCards","filter","cardName","includes","cardRare","cardTrunfo","map","card"],"mappings":"u7BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CAEA;AACA;AACA;2FAEqBC,CAAAA,U,iPACnB,iBAAS,CACP,gBAMI,KAAKC,KANT,CACEC,QADF,aACEA,QADF,CAEEC,UAFF,aAEEA,UAFF,CAGEC,UAHF,aAGEA,UAHF,CAIEC,UAJF,aAIEA,UAJF,CAKEC,YALF,aAKEA,YALF,CAQA,GAAIC,CAAAA,WAAW,oBAAOL,QAAP,CAAf,CACA;AAEA;AAEA,GAAIE,UAAJ,CAAgB,CACd;AACAG,WAAW,CAAGA,WAAW,CAACC,MAAZ,CAAmB,kBAAGC,CAAAA,QAAH,MAAGA,QAAH,OAAkBA,CAAAA,QAAQ,CAACC,QAAT,CAAkBN,UAAlB,CAAlB,EAAnB,CAAd,CACD,CACD,GAAIC,UAAU,GAAK,OAAnB,CAA4B,CAC1BE,WAAW,CAAGA,WAAW,CAACC,MAAZ,CAAmB,mBAAGG,CAAAA,QAAH,OAAGA,QAAH,OAAmBA,CAAAA,QAAQ,GAAKN,UAAhC,EAAnB,CAAd,CACA;AACD,CACD,GAAIC,YAAJ,CAAkB,CAChBC,WAAW,CAAGL,QAAQ,CAACM,MAAT,CAAgB,mBAAGI,CAAAA,UAAH,OAAGA,UAAH,OAAoBA,CAAAA,UAApB,EAAhB,CAAd,CACA;AACD,CACD;AAEA,mBACE,yBACIL,WAAW,CAACM,GAAZ,CAAgB,SAACC,IAAD,qBAChB,oCACE,KAAC,IAAD,kBACOA,IADP,EADF,cAIE,eACE,IAAI,CAAC,QADP,CAEE,cAAY,eAFd,CAGE,OAAO,CAAG,yBAAMX,CAAAA,UAAU,CAACW,IAAD,CAAOA,IAAI,CAACF,UAAZ,CAAhB,EAHZ,qBAJF,GAAWE,IAAI,CAACL,QAAhB,CADgB,EAAhB,CADJ,EADF,CAiBD,C,wBA9CqCX,S,SAAnBE,U","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\n\n// Requisito 10, 11 e 12 feitos seguindo o PR do Leonardo Vogel, com o objetivo de treinar a implementação da função e quem sabe deixar o joguinho funcional depois. Obrigada Leo.\n// Obrigada Eduardo Bazler por me ajudar a resolver o conflito no requisito, para passar no teste e não imprimir mais duas listas no meu Tryunfo, precisei remover do App o CardList, que continua comitado para consulta, a exibição anterior da lista que eu tinha criado para passar no requisito 8.\n// Agora só a lista com os filtros é exibida na minha página do Tryunfo.\n\nexport default class FilterList extends Component {\n  render() {\n    const {\n      cardList,\n      deleteCard,\n      filterName,\n      filterRare,\n      filterTrunfo,\n    } = this.props;\n\n    let filterCards = [...cardList];\n    // aqui o filtro atualiza o array de cards de acordo com o que foi aplicado, um valor inicial recebe a lista de cartas, para que caso não seja aplicado nenhum filtro, ele exiba todos as cartas;\n\n    // caso exista alguma coisa no input de filtro por nome, ele executa um filter atualizando o próprio filterCards, adicionando ao novo array apenas aqueles cards que tenham no nome o que foi passado no input;\n\n    if (filterName) {\n      // se a string não for vazia, considera como true;\n      filterCards = filterCards.filter(({ cardName }) => cardName.includes(filterName));\n    }\n    if (filterRare !== 'todas') {\n      filterCards = filterCards.filter(({ cardRare }) => (cardRare === filterRare));\n      // se o filtro por raridade for diferente de todas as cartas, ele atualiza o filterCards, colocando no novo array apenas os cards que possuem a raridade informada, como essa condição aparece depois da filtragem por nome, caso já esteja sendo filtrado algo pelo nome, ele usa como array inicial o que já está filtrado, tornando assim os dois acumulativos.\n    }\n    if (filterTrunfo) {\n      filterCards = cardList.filter(({ cardTrunfo }) => cardTrunfo);\n      // caso o checkbox de filtro por Super Trunfo seja marcado, ele atualiza o filterCards, usando como array base o array cardList original, por esse motivo, por isso é a última condição, não sendo cumulativa;\n    }\n    // depois de realizar os filtros, o .map será executado para renderizar com o componente Card, os que precisam a lista que precisa ser renderizada;\n\n    return (\n      <section>\n        { filterCards.map((card) => (\n          <div key={ card.cardName }>\n            <Card\n              { ...card }\n            />\n            <button\n              type=\"button\"\n              data-testid=\"delete-button\"\n              onClick={ () => deleteCard(card, card.cardTrunfo) }\n            >\n              Excluir\n            </button>\n          </div>\n        ))}\n      </section>);\n  }\n}\n\nFilterList.propTypes = {\n  cardList: PropTypes.array,\n  deteleCard: PropTypes.func,\n  filterName: PropTypes.string,\n  filterRare: PropTypes.string,\n  filterTrunfo: PropTypes.string,\n}.isRequired;\n"]},"metadata":{},"sourceType":"module"}